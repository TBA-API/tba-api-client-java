/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.thefletcher.tbaapi.v3client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


import org.junit.jupiter.api.Test;


/**
 * Model tests for EventInsights2017
 */
class EventInsights2017Test {
    private final EventInsights2017 model = new EventInsights2017();

    /**
     * Model tests for EventInsights2017
     */
    @Test
    void testEventInsights2017() {
        // TODO: test EventInsights2017
    }

    /**
     * Test the property 'averageFoulScore'
     */
    @Test
    void averageFoulScoreTest() {
        // TODO: test averageFoulScore
    }

    /**
     * Test the property 'averageFuelPoints'
     */
    @Test
    void averageFuelPointsTest() {
        // TODO: test averageFuelPoints
    }

    /**
     * Test the property 'averageFuelPointsAuto'
     */
    @Test
    void averageFuelPointsAutoTest() {
        // TODO: test averageFuelPointsAuto
    }

    /**
     * Test the property 'averageFuelPointsTeleop'
     */
    @Test
    void averageFuelPointsTeleopTest() {
        // TODO: test averageFuelPointsTeleop
    }

    /**
     * Test the property 'averageHighGoals'
     */
    @Test
    void averageHighGoalsTest() {
        // TODO: test averageHighGoals
    }

    /**
     * Test the property 'averageHighGoalsAuto'
     */
    @Test
    void averageHighGoalsAutoTest() {
        // TODO: test averageHighGoalsAuto
    }

    /**
     * Test the property 'averageHighGoalsTeleop'
     */
    @Test
    void averageHighGoalsTeleopTest() {
        // TODO: test averageHighGoalsTeleop
    }

    /**
     * Test the property 'averageLowGoals'
     */
    @Test
    void averageLowGoalsTest() {
        // TODO: test averageLowGoals
    }

    /**
     * Test the property 'averageLowGoalsAuto'
     */
    @Test
    void averageLowGoalsAutoTest() {
        // TODO: test averageLowGoalsAuto
    }

    /**
     * Test the property 'averageLowGoalsTeleop'
     */
    @Test
    void averageLowGoalsTeleopTest() {
        // TODO: test averageLowGoalsTeleop
    }

    /**
     * Test the property 'averageMobilityPointsAuto'
     */
    @Test
    void averageMobilityPointsAutoTest() {
        // TODO: test averageMobilityPointsAuto
    }

    /**
     * Test the property 'averagePointsAuto'
     */
    @Test
    void averagePointsAutoTest() {
        // TODO: test averagePointsAuto
    }

    /**
     * Test the property 'averagePointsTeleop'
     */
    @Test
    void averagePointsTeleopTest() {
        // TODO: test averagePointsTeleop
    }

    /**
     * Test the property 'averageRotorPoints'
     */
    @Test
    void averageRotorPointsTest() {
        // TODO: test averageRotorPoints
    }

    /**
     * Test the property 'averageRotorPointsAuto'
     */
    @Test
    void averageRotorPointsAutoTest() {
        // TODO: test averageRotorPointsAuto
    }

    /**
     * Test the property 'averageRotorPointsTeleop'
     */
    @Test
    void averageRotorPointsTeleopTest() {
        // TODO: test averageRotorPointsTeleop
    }

    /**
     * Test the property 'averageScore'
     */
    @Test
    void averageScoreTest() {
        // TODO: test averageScore
    }

    /**
     * Test the property 'averageTakeoffPointsTeleop'
     */
    @Test
    void averageTakeoffPointsTeleopTest() {
        // TODO: test averageTakeoffPointsTeleop
    }

    /**
     * Test the property 'averageWinMargin'
     */
    @Test
    void averageWinMarginTest() {
        // TODO: test averageWinMargin
    }

    /**
     * Test the property 'averageWinScore'
     */
    @Test
    void averageWinScoreTest() {
        // TODO: test averageWinScore
    }

    /**
     * Test the property 'highKpa'
     */
    @Test
    void highKpaTest() {
        // TODO: test highKpa
    }

    /**
     * Test the property 'highScore'
     */
    @Test
    void highScoreTest() {
        // TODO: test highScore
    }

    /**
     * Test the property 'kpaAchieved'
     */
    @Test
    void kpaAchievedTest() {
        // TODO: test kpaAchieved
    }

    /**
     * Test the property 'mobilityCounts'
     */
    @Test
    void mobilityCountsTest() {
        // TODO: test mobilityCounts
    }

    /**
     * Test the property 'rotor1Engaged'
     */
    @Test
    void rotor1EngagedTest() {
        // TODO: test rotor1Engaged
    }

    /**
     * Test the property 'rotor1EngagedAuto'
     */
    @Test
    void rotor1EngagedAutoTest() {
        // TODO: test rotor1EngagedAuto
    }

    /**
     * Test the property 'rotor2Engaged'
     */
    @Test
    void rotor2EngagedTest() {
        // TODO: test rotor2Engaged
    }

    /**
     * Test the property 'rotor2EngagedAuto'
     */
    @Test
    void rotor2EngagedAutoTest() {
        // TODO: test rotor2EngagedAuto
    }

    /**
     * Test the property 'rotor3Engaged'
     */
    @Test
    void rotor3EngagedTest() {
        // TODO: test rotor3Engaged
    }

    /**
     * Test the property 'rotor4Engaged'
     */
    @Test
    void rotor4EngagedTest() {
        // TODO: test rotor4Engaged
    }

    /**
     * Test the property 'takeoffCounts'
     */
    @Test
    void takeoffCountsTest() {
        // TODO: test takeoffCounts
    }

    /**
     * Test the property 'unicornMatches'
     */
    @Test
    void unicornMatchesTest() {
        // TODO: test unicornMatches
    }

}
