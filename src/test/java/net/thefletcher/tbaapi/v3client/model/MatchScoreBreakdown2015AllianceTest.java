/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.thefletcher.tbaapi.v3client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;


import org.junit.jupiter.api.Test;


/**
 * Model tests for MatchScoreBreakdown2015Alliance
 */
class MatchScoreBreakdown2015AllianceTest {
    private final MatchScoreBreakdown2015Alliance model = new MatchScoreBreakdown2015Alliance();

    /**
     * Model tests for MatchScoreBreakdown2015Alliance
     */
    @Test
    void testMatchScoreBreakdown2015Alliance() {
        // TODO: test MatchScoreBreakdown2015Alliance
    }

    /**
     * Test the property 'autoPoints'
     */
    @Test
    void autoPointsTest() {
        // TODO: test autoPoints
    }

    /**
     * Test the property 'teleopPoints'
     */
    @Test
    void teleopPointsTest() {
        // TODO: test teleopPoints
    }

    /**
     * Test the property 'containerPoints'
     */
    @Test
    void containerPointsTest() {
        // TODO: test containerPoints
    }

    /**
     * Test the property 'totePoints'
     */
    @Test
    void totePointsTest() {
        // TODO: test totePoints
    }

    /**
     * Test the property 'litterPoints'
     */
    @Test
    void litterPointsTest() {
        // TODO: test litterPoints
    }

    /**
     * Test the property 'foulPoints'
     */
    @Test
    void foulPointsTest() {
        // TODO: test foulPoints
    }

    /**
     * Test the property 'adjustPoints'
     */
    @Test
    void adjustPointsTest() {
        // TODO: test adjustPoints
    }

    /**
     * Test the property 'totalPoints'
     */
    @Test
    void totalPointsTest() {
        // TODO: test totalPoints
    }

    /**
     * Test the property 'foulCount'
     */
    @Test
    void foulCountTest() {
        // TODO: test foulCount
    }

    /**
     * Test the property 'toteCountFar'
     */
    @Test
    void toteCountFarTest() {
        // TODO: test toteCountFar
    }

    /**
     * Test the property 'toteCountNear'
     */
    @Test
    void toteCountNearTest() {
        // TODO: test toteCountNear
    }

    /**
     * Test the property 'toteSet'
     */
    @Test
    void toteSetTest() {
        // TODO: test toteSet
    }

    /**
     * Test the property 'toteStack'
     */
    @Test
    void toteStackTest() {
        // TODO: test toteStack
    }

    /**
     * Test the property 'containerCountLevel1'
     */
    @Test
    void containerCountLevel1Test() {
        // TODO: test containerCountLevel1
    }

    /**
     * Test the property 'containerCountLevel2'
     */
    @Test
    void containerCountLevel2Test() {
        // TODO: test containerCountLevel2
    }

    /**
     * Test the property 'containerCountLevel3'
     */
    @Test
    void containerCountLevel3Test() {
        // TODO: test containerCountLevel3
    }

    /**
     * Test the property 'containerCountLevel4'
     */
    @Test
    void containerCountLevel4Test() {
        // TODO: test containerCountLevel4
    }

    /**
     * Test the property 'containerCountLevel5'
     */
    @Test
    void containerCountLevel5Test() {
        // TODO: test containerCountLevel5
    }

    /**
     * Test the property 'containerCountLevel6'
     */
    @Test
    void containerCountLevel6Test() {
        // TODO: test containerCountLevel6
    }

    /**
     * Test the property 'containerSet'
     */
    @Test
    void containerSetTest() {
        // TODO: test containerSet
    }

    /**
     * Test the property 'litterCountContainer'
     */
    @Test
    void litterCountContainerTest() {
        // TODO: test litterCountContainer
    }

    /**
     * Test the property 'litterCountLandfill'
     */
    @Test
    void litterCountLandfillTest() {
        // TODO: test litterCountLandfill
    }

    /**
     * Test the property 'litterCountUnprocessed'
     */
    @Test
    void litterCountUnprocessedTest() {
        // TODO: test litterCountUnprocessed
    }

    /**
     * Test the property 'robotSet'
     */
    @Test
    void robotSetTest() {
        // TODO: test robotSet
    }

}
