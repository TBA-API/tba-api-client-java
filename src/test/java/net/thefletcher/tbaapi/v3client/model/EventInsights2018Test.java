/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.thefletcher.tbaapi.v3client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


import org.junit.jupiter.api.Test;


/**
 * Model tests for EventInsights2018
 */
class EventInsights2018Test {
    private final EventInsights2018 model = new EventInsights2018();

    /**
     * Model tests for EventInsights2018
     */
    @Test
    void testEventInsights2018() {
        // TODO: test EventInsights2018
    }

    /**
     * Test the property 'autoQuestAchieved'
     */
    @Test
    void autoQuestAchievedTest() {
        // TODO: test autoQuestAchieved
    }

    /**
     * Test the property 'averageBoostPlayed'
     */
    @Test
    void averageBoostPlayedTest() {
        // TODO: test averageBoostPlayed
    }

    /**
     * Test the property 'averageEndgamePoints'
     */
    @Test
    void averageEndgamePointsTest() {
        // TODO: test averageEndgamePoints
    }

    /**
     * Test the property 'averageForcePlayed'
     */
    @Test
    void averageForcePlayedTest() {
        // TODO: test averageForcePlayed
    }

    /**
     * Test the property 'averageFoulScore'
     */
    @Test
    void averageFoulScoreTest() {
        // TODO: test averageFoulScore
    }

    /**
     * Test the property 'averagePointsAuto'
     */
    @Test
    void averagePointsAutoTest() {
        // TODO: test averagePointsAuto
    }

    /**
     * Test the property 'averagePointsTeleop'
     */
    @Test
    void averagePointsTeleopTest() {
        // TODO: test averagePointsTeleop
    }

    /**
     * Test the property 'averageRunPointsAuto'
     */
    @Test
    void averageRunPointsAutoTest() {
        // TODO: test averageRunPointsAuto
    }

    /**
     * Test the property 'averageScaleOwnershipPoints'
     */
    @Test
    void averageScaleOwnershipPointsTest() {
        // TODO: test averageScaleOwnershipPoints
    }

    /**
     * Test the property 'averageScaleOwnershipPointsAuto'
     */
    @Test
    void averageScaleOwnershipPointsAutoTest() {
        // TODO: test averageScaleOwnershipPointsAuto
    }

    /**
     * Test the property 'averageScaleOwnershipPointsTeleop'
     */
    @Test
    void averageScaleOwnershipPointsTeleopTest() {
        // TODO: test averageScaleOwnershipPointsTeleop
    }

    /**
     * Test the property 'averageScore'
     */
    @Test
    void averageScoreTest() {
        // TODO: test averageScore
    }

    /**
     * Test the property 'averageSwitchOwnershipPoints'
     */
    @Test
    void averageSwitchOwnershipPointsTest() {
        // TODO: test averageSwitchOwnershipPoints
    }

    /**
     * Test the property 'averageSwitchOwnershipPointsAuto'
     */
    @Test
    void averageSwitchOwnershipPointsAutoTest() {
        // TODO: test averageSwitchOwnershipPointsAuto
    }

    /**
     * Test the property 'averageSwitchOwnershipPointsTeleop'
     */
    @Test
    void averageSwitchOwnershipPointsTeleopTest() {
        // TODO: test averageSwitchOwnershipPointsTeleop
    }

    /**
     * Test the property 'averageVaultPoints'
     */
    @Test
    void averageVaultPointsTest() {
        // TODO: test averageVaultPoints
    }

    /**
     * Test the property 'averageWinMargin'
     */
    @Test
    void averageWinMarginTest() {
        // TODO: test averageWinMargin
    }

    /**
     * Test the property 'averageWinScore'
     */
    @Test
    void averageWinScoreTest() {
        // TODO: test averageWinScore
    }

    /**
     * Test the property 'boostPlayedCounts'
     */
    @Test
    void boostPlayedCountsTest() {
        // TODO: test boostPlayedCounts
    }

    /**
     * Test the property 'climbCounts'
     */
    @Test
    void climbCountsTest() {
        // TODO: test climbCounts
    }

    /**
     * Test the property 'faceTheBossAchieved'
     */
    @Test
    void faceTheBossAchievedTest() {
        // TODO: test faceTheBossAchieved
    }

    /**
     * Test the property 'forcePlayedCounts'
     */
    @Test
    void forcePlayedCountsTest() {
        // TODO: test forcePlayedCounts
    }

    /**
     * Test the property 'highScore'
     */
    @Test
    void highScoreTest() {
        // TODO: test highScore
    }

    /**
     * Test the property 'levitatePlayedCounts'
     */
    @Test
    void levitatePlayedCountsTest() {
        // TODO: test levitatePlayedCounts
    }

    /**
     * Test the property 'runCountsAuto'
     */
    @Test
    void runCountsAutoTest() {
        // TODO: test runCountsAuto
    }

    /**
     * Test the property 'scaleNeutralPercentage'
     */
    @Test
    void scaleNeutralPercentageTest() {
        // TODO: test scaleNeutralPercentage
    }

    /**
     * Test the property 'scaleNeutralPercentageAuto'
     */
    @Test
    void scaleNeutralPercentageAutoTest() {
        // TODO: test scaleNeutralPercentageAuto
    }

    /**
     * Test the property 'scaleNeutralPercentageTeleop'
     */
    @Test
    void scaleNeutralPercentageTeleopTest() {
        // TODO: test scaleNeutralPercentageTeleop
    }

    /**
     * Test the property 'switchOwnedCountsAuto'
     */
    @Test
    void switchOwnedCountsAutoTest() {
        // TODO: test switchOwnedCountsAuto
    }

    /**
     * Test the property 'unicornMatches'
     */
    @Test
    void unicornMatchesTest() {
        // TODO: test unicornMatches
    }

    /**
     * Test the property 'winningOppSwitchDenialPercentageTeleop'
     */
    @Test
    void winningOppSwitchDenialPercentageTeleopTest() {
        // TODO: test winningOppSwitchDenialPercentageTeleop
    }

    /**
     * Test the property 'winningOwnSwitchOwnershipPercentage'
     */
    @Test
    void winningOwnSwitchOwnershipPercentageTest() {
        // TODO: test winningOwnSwitchOwnershipPercentage
    }

    /**
     * Test the property 'winningOwnSwitchOwnershipPercentageAuto'
     */
    @Test
    void winningOwnSwitchOwnershipPercentageAutoTest() {
        // TODO: test winningOwnSwitchOwnershipPercentageAuto
    }

    /**
     * Test the property 'winningOwnSwitchOwnershipPercentageTeleop'
     */
    @Test
    void winningOwnSwitchOwnershipPercentageTeleopTest() {
        // TODO: test winningOwnSwitchOwnershipPercentageTeleop
    }

    /**
     * Test the property 'winningScaleOwnershipPercentage'
     */
    @Test
    void winningScaleOwnershipPercentageTest() {
        // TODO: test winningScaleOwnershipPercentage
    }

    /**
     * Test the property 'winningScaleOwnershipPercentageAuto'
     */
    @Test
    void winningScaleOwnershipPercentageAutoTest() {
        // TODO: test winningScaleOwnershipPercentageAuto
    }

    /**
     * Test the property 'winningScaleOwnershipPercentageTeleop'
     */
    @Test
    void winningScaleOwnershipPercentageTeleopTest() {
        // TODO: test winningScaleOwnershipPercentageTeleop
    }

}
