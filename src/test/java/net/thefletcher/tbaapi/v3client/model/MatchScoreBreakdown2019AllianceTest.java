/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.thefletcher.tbaapi.v3client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;


import org.junit.jupiter.api.Test;


/**
 * Model tests for MatchScoreBreakdown2019Alliance
 */
class MatchScoreBreakdown2019AllianceTest {
    private final MatchScoreBreakdown2019Alliance model = new MatchScoreBreakdown2019Alliance();

    /**
     * Model tests for MatchScoreBreakdown2019Alliance
     */
    @Test
    void testMatchScoreBreakdown2019Alliance() {
        // TODO: test MatchScoreBreakdown2019Alliance
    }

    /**
     * Test the property 'adjustPoints'
     */
    @Test
    void adjustPointsTest() {
        // TODO: test adjustPoints
    }

    /**
     * Test the property 'autoPoints'
     */
    @Test
    void autoPointsTest() {
        // TODO: test autoPoints
    }

    /**
     * Test the property 'bay1'
     */
    @Test
    void bay1Test() {
        // TODO: test bay1
    }

    /**
     * Test the property 'bay2'
     */
    @Test
    void bay2Test() {
        // TODO: test bay2
    }

    /**
     * Test the property 'bay3'
     */
    @Test
    void bay3Test() {
        // TODO: test bay3
    }

    /**
     * Test the property 'bay4'
     */
    @Test
    void bay4Test() {
        // TODO: test bay4
    }

    /**
     * Test the property 'bay5'
     */
    @Test
    void bay5Test() {
        // TODO: test bay5
    }

    /**
     * Test the property 'bay6'
     */
    @Test
    void bay6Test() {
        // TODO: test bay6
    }

    /**
     * Test the property 'bay7'
     */
    @Test
    void bay7Test() {
        // TODO: test bay7
    }

    /**
     * Test the property 'bay8'
     */
    @Test
    void bay8Test() {
        // TODO: test bay8
    }

    /**
     * Test the property 'cargoPoints'
     */
    @Test
    void cargoPointsTest() {
        // TODO: test cargoPoints
    }

    /**
     * Test the property 'completeRocketRankingPoint'
     */
    @Test
    void completeRocketRankingPointTest() {
        // TODO: test completeRocketRankingPoint
    }

    /**
     * Test the property 'completedRocketFar'
     */
    @Test
    void completedRocketFarTest() {
        // TODO: test completedRocketFar
    }

    /**
     * Test the property 'completedRocketNear'
     */
    @Test
    void completedRocketNearTest() {
        // TODO: test completedRocketNear
    }

    /**
     * Test the property 'endgameRobot1'
     */
    @Test
    void endgameRobot1Test() {
        // TODO: test endgameRobot1
    }

    /**
     * Test the property 'endgameRobot2'
     */
    @Test
    void endgameRobot2Test() {
        // TODO: test endgameRobot2
    }

    /**
     * Test the property 'endgameRobot3'
     */
    @Test
    void endgameRobot3Test() {
        // TODO: test endgameRobot3
    }

    /**
     * Test the property 'foulCount'
     */
    @Test
    void foulCountTest() {
        // TODO: test foulCount
    }

    /**
     * Test the property 'foulPoints'
     */
    @Test
    void foulPointsTest() {
        // TODO: test foulPoints
    }

    /**
     * Test the property 'habClimbPoints'
     */
    @Test
    void habClimbPointsTest() {
        // TODO: test habClimbPoints
    }

    /**
     * Test the property 'habDockingRankingPoint'
     */
    @Test
    void habDockingRankingPointTest() {
        // TODO: test habDockingRankingPoint
    }

    /**
     * Test the property 'habLineRobot1'
     */
    @Test
    void habLineRobot1Test() {
        // TODO: test habLineRobot1
    }

    /**
     * Test the property 'habLineRobot2'
     */
    @Test
    void habLineRobot2Test() {
        // TODO: test habLineRobot2
    }

    /**
     * Test the property 'habLineRobot3'
     */
    @Test
    void habLineRobot3Test() {
        // TODO: test habLineRobot3
    }

    /**
     * Test the property 'hatchPanelPoints'
     */
    @Test
    void hatchPanelPointsTest() {
        // TODO: test hatchPanelPoints
    }

    /**
     * Test the property 'lowLeftRocketFar'
     */
    @Test
    void lowLeftRocketFarTest() {
        // TODO: test lowLeftRocketFar
    }

    /**
     * Test the property 'lowLeftRocketNear'
     */
    @Test
    void lowLeftRocketNearTest() {
        // TODO: test lowLeftRocketNear
    }

    /**
     * Test the property 'lowRightRocketFar'
     */
    @Test
    void lowRightRocketFarTest() {
        // TODO: test lowRightRocketFar
    }

    /**
     * Test the property 'lowRightRocketNear'
     */
    @Test
    void lowRightRocketNearTest() {
        // TODO: test lowRightRocketNear
    }

    /**
     * Test the property 'midLeftRocketFar'
     */
    @Test
    void midLeftRocketFarTest() {
        // TODO: test midLeftRocketFar
    }

    /**
     * Test the property 'midLeftRocketNear'
     */
    @Test
    void midLeftRocketNearTest() {
        // TODO: test midLeftRocketNear
    }

    /**
     * Test the property 'midRightRocketFar'
     */
    @Test
    void midRightRocketFarTest() {
        // TODO: test midRightRocketFar
    }

    /**
     * Test the property 'midRightRocketNear'
     */
    @Test
    void midRightRocketNearTest() {
        // TODO: test midRightRocketNear
    }

    /**
     * Test the property 'preMatchBay1'
     */
    @Test
    void preMatchBay1Test() {
        // TODO: test preMatchBay1
    }

    /**
     * Test the property 'preMatchBay2'
     */
    @Test
    void preMatchBay2Test() {
        // TODO: test preMatchBay2
    }

    /**
     * Test the property 'preMatchBay3'
     */
    @Test
    void preMatchBay3Test() {
        // TODO: test preMatchBay3
    }

    /**
     * Test the property 'preMatchBay6'
     */
    @Test
    void preMatchBay6Test() {
        // TODO: test preMatchBay6
    }

    /**
     * Test the property 'preMatchBay7'
     */
    @Test
    void preMatchBay7Test() {
        // TODO: test preMatchBay7
    }

    /**
     * Test the property 'preMatchBay8'
     */
    @Test
    void preMatchBay8Test() {
        // TODO: test preMatchBay8
    }

    /**
     * Test the property 'preMatchLevelRobot1'
     */
    @Test
    void preMatchLevelRobot1Test() {
        // TODO: test preMatchLevelRobot1
    }

    /**
     * Test the property 'preMatchLevelRobot2'
     */
    @Test
    void preMatchLevelRobot2Test() {
        // TODO: test preMatchLevelRobot2
    }

    /**
     * Test the property 'preMatchLevelRobot3'
     */
    @Test
    void preMatchLevelRobot3Test() {
        // TODO: test preMatchLevelRobot3
    }

    /**
     * Test the property 'rp'
     */
    @Test
    void rpTest() {
        // TODO: test rp
    }

    /**
     * Test the property 'sandStormBonusPoints'
     */
    @Test
    void sandStormBonusPointsTest() {
        // TODO: test sandStormBonusPoints
    }

    /**
     * Test the property 'techFoulCount'
     */
    @Test
    void techFoulCountTest() {
        // TODO: test techFoulCount
    }

    /**
     * Test the property 'teleopPoints'
     */
    @Test
    void teleopPointsTest() {
        // TODO: test teleopPoints
    }

    /**
     * Test the property 'topLeftRocketFar'
     */
    @Test
    void topLeftRocketFarTest() {
        // TODO: test topLeftRocketFar
    }

    /**
     * Test the property 'topLeftRocketNear'
     */
    @Test
    void topLeftRocketNearTest() {
        // TODO: test topLeftRocketNear
    }

    /**
     * Test the property 'topRightRocketFar'
     */
    @Test
    void topRightRocketFarTest() {
        // TODO: test topRightRocketFar
    }

    /**
     * Test the property 'topRightRocketNear'
     */
    @Test
    void topRightRocketNearTest() {
        // TODO: test topRightRocketNear
    }

    /**
     * Test the property 'totalPoints'
     */
    @Test
    void totalPointsTest() {
        // TODO: test totalPoints
    }

}
