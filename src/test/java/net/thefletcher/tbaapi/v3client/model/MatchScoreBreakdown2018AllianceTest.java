/*
 * The Blue Alliance API v3
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * OpenAPI spec version: 3.04.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package net.thefletcher.tbaapi.v3client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;


import org.junit.jupiter.api.Test;


/**
 * Model tests for MatchScoreBreakdown2018Alliance
 */
class MatchScoreBreakdown2018AllianceTest {
    private final MatchScoreBreakdown2018Alliance model = new MatchScoreBreakdown2018Alliance();

    /**
     * Model tests for MatchScoreBreakdown2018Alliance
     */
    @Test
    void testMatchScoreBreakdown2018Alliance() {
        // TODO: test MatchScoreBreakdown2018Alliance
    }

    /**
     * Test the property 'adjustPoints'
     */
    @Test
    void adjustPointsTest() {
        // TODO: test adjustPoints
    }

    /**
     * Test the property 'autoOwnershipPoints'
     */
    @Test
    void autoOwnershipPointsTest() {
        // TODO: test autoOwnershipPoints
    }

    /**
     * Test the property 'autoPoints'
     */
    @Test
    void autoPointsTest() {
        // TODO: test autoPoints
    }

    /**
     * Test the property 'autoQuestRankingPoint'
     */
    @Test
    void autoQuestRankingPointTest() {
        // TODO: test autoQuestRankingPoint
    }

    /**
     * Test the property 'autoRobot1'
     */
    @Test
    void autoRobot1Test() {
        // TODO: test autoRobot1
    }

    /**
     * Test the property 'autoRobot2'
     */
    @Test
    void autoRobot2Test() {
        // TODO: test autoRobot2
    }

    /**
     * Test the property 'autoRobot3'
     */
    @Test
    void autoRobot3Test() {
        // TODO: test autoRobot3
    }

    /**
     * Test the property 'autoRunPoints'
     */
    @Test
    void autoRunPointsTest() {
        // TODO: test autoRunPoints
    }

    /**
     * Test the property 'autoScaleOwnershipSec'
     */
    @Test
    void autoScaleOwnershipSecTest() {
        // TODO: test autoScaleOwnershipSec
    }

    /**
     * Test the property 'autoSwitchAtZero'
     */
    @Test
    void autoSwitchAtZeroTest() {
        // TODO: test autoSwitchAtZero
    }

    /**
     * Test the property 'autoSwitchOwnershipSec'
     */
    @Test
    void autoSwitchOwnershipSecTest() {
        // TODO: test autoSwitchOwnershipSec
    }

    /**
     * Test the property 'endgamePoints'
     */
    @Test
    void endgamePointsTest() {
        // TODO: test endgamePoints
    }

    /**
     * Test the property 'endgameRobot1'
     */
    @Test
    void endgameRobot1Test() {
        // TODO: test endgameRobot1
    }

    /**
     * Test the property 'endgameRobot2'
     */
    @Test
    void endgameRobot2Test() {
        // TODO: test endgameRobot2
    }

    /**
     * Test the property 'endgameRobot3'
     */
    @Test
    void endgameRobot3Test() {
        // TODO: test endgameRobot3
    }

    /**
     * Test the property 'faceTheBossRankingPoint'
     */
    @Test
    void faceTheBossRankingPointTest() {
        // TODO: test faceTheBossRankingPoint
    }

    /**
     * Test the property 'foulCount'
     */
    @Test
    void foulCountTest() {
        // TODO: test foulCount
    }

    /**
     * Test the property 'foulPoints'
     */
    @Test
    void foulPointsTest() {
        // TODO: test foulPoints
    }

    /**
     * Test the property 'rp'
     */
    @Test
    void rpTest() {
        // TODO: test rp
    }

    /**
     * Test the property 'techFoulCount'
     */
    @Test
    void techFoulCountTest() {
        // TODO: test techFoulCount
    }

    /**
     * Test the property 'teleopOwnershipPoints'
     */
    @Test
    void teleopOwnershipPointsTest() {
        // TODO: test teleopOwnershipPoints
    }

    /**
     * Test the property 'teleopPoints'
     */
    @Test
    void teleopPointsTest() {
        // TODO: test teleopPoints
    }

    /**
     * Test the property 'teleopScaleBoostSec'
     */
    @Test
    void teleopScaleBoostSecTest() {
        // TODO: test teleopScaleBoostSec
    }

    /**
     * Test the property 'teleopScaleForceSec'
     */
    @Test
    void teleopScaleForceSecTest() {
        // TODO: test teleopScaleForceSec
    }

    /**
     * Test the property 'teleopScaleOwnershipSec'
     */
    @Test
    void teleopScaleOwnershipSecTest() {
        // TODO: test teleopScaleOwnershipSec
    }

    /**
     * Test the property 'teleopSwitchBoostSec'
     */
    @Test
    void teleopSwitchBoostSecTest() {
        // TODO: test teleopSwitchBoostSec
    }

    /**
     * Test the property 'teleopSwitchForceSec'
     */
    @Test
    void teleopSwitchForceSecTest() {
        // TODO: test teleopSwitchForceSec
    }

    /**
     * Test the property 'teleopSwitchOwnershipSec'
     */
    @Test
    void teleopSwitchOwnershipSecTest() {
        // TODO: test teleopSwitchOwnershipSec
    }

    /**
     * Test the property 'totalPoints'
     */
    @Test
    void totalPointsTest() {
        // TODO: test totalPoints
    }

    /**
     * Test the property 'vaultBoostPlayed'
     */
    @Test
    void vaultBoostPlayedTest() {
        // TODO: test vaultBoostPlayed
    }

    /**
     * Test the property 'vaultBoostTotal'
     */
    @Test
    void vaultBoostTotalTest() {
        // TODO: test vaultBoostTotal
    }

    /**
     * Test the property 'vaultForcePlayed'
     */
    @Test
    void vaultForcePlayedTest() {
        // TODO: test vaultForcePlayed
    }

    /**
     * Test the property 'vaultForceTotal'
     */
    @Test
    void vaultForceTotalTest() {
        // TODO: test vaultForceTotal
    }

    /**
     * Test the property 'vaultLevitatePlayed'
     */
    @Test
    void vaultLevitatePlayedTest() {
        // TODO: test vaultLevitatePlayed
    }

    /**
     * Test the property 'vaultLevitateTotal'
     */
    @Test
    void vaultLevitateTotalTest() {
        // TODO: test vaultLevitateTotal
    }

    /**
     * Test the property 'vaultPoints'
     */
    @Test
    void vaultPointsTest() {
        // TODO: test vaultPoints
    }

    /**
     * Test the property 'tbaGameData'
     */
    @Test
    void tbaGameDataTest() {
        // TODO: test tbaGameData
    }

}
